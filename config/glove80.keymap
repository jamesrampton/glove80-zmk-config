#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "REQUIRE_PRIOR_IDLE_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <500>;
            bindings = <&kp>, <&kp>;
        };
        /* ------------------------------- mod-morphs ------------------------------- */
        // tap: comma | shift + tap: semicolon
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // tap: dot | shift + tap: colon
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_DOT";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // tap: paren | shift + tap: angle bracket
        lpar_morph: lpar_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_PAREN_L";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // tap: paren | shift + tap: angle bracket
        rpar_morph: rpar_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_PAREN_R";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
        thin_arrow: thin_arrow {
            label = "THIN_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp MINUS &kp GT>;
        };
        fat_arrow: fat_arrow {
            label = "FAT_ARROW";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp EQUAL &kp GT>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
                &none    &kp C_PP  &kp C_VOL_DN  &kp C_VOL_UP   &kp C_MUTE                                                                                          &kp F14   &kp F15     &none      &none      &none
                &none       &none         &none      &kp LBKT  &lpar_morph     &none                                                                     &none  &rpar_morph  &kp RBKT     &none      &none      &none
            &kp GRAVE       &kp Q         &kp Y         &kp O        &kp U     &kp X                                                                     &kp G        &kp C     &kp M     &kp N      &kp Z   &kp HOME
              &kp TAB       &kp H         &kp I         &kp E        &kp A  &kp FSLH                                                                     &kp D        &kp S     &kp T     &kp R      &kp B    &kp END
          &kp LS(TAB)       &kp J  &comma_morph    &dot_morph        &kp K   &kp SQT  &lower  &kp LGUI  &kp LC(LS(LALT))  &kp ESC   &kp RET  &skq LSHFT  &kp W        &kp F     &kp L     &kp P      &kp V  &kp PG_UP
 &magic LAYER_Magic 0  &kp RA(N3)      &kp BSLH     &kp EQUAL    &kp MINUS             &none  &kp LALT          &kp LCTL  &kp DEL  &kp BSPC     &kp SPC            &kp DOWN    &kp UP  &kp LEFT  &kp RIGHT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
               &kp F1  &kp F2       &kp F3            &kp F4            &kp F5                                                                              &kp F6        &kp F7      &kp F8   &kp F9  &kp F10
               &trans   &none        &none             &none             &none  &none                                                     &kp KP_SLASH  &kp KP_NUM  &kp KP_EQUAL       &none    &none   &trans
               &trans   &none        &none      &kp LG(LBKT)      &kp LG(RBKT)  &none                                                  &kp KP_MULTIPLY      &kp N7        &kp N8      &kp N9    &none   &trans
               &trans   &none        &none  &kp LS(LG(LBKT))  &kp LS(LG(RBKT))  &none                                                     &kp KP_MINUS      &kp N4        &kp N5      &kp N6    &none   &trans
               &trans   &none        &none       &thin_arrow        &fat_arrow  &none  &trans  &trans  &trans  &trans  &trans  &trans      &kp KP_PLUS      &kp N1        &kp N2      &kp N3    &none   &trans
 &magic LAYER_Magic 0   &kp LCTL  &kp LALT          &kp LGUI         &kp LSHFT         &trans  &trans  &trans  &trans  &trans  &trans                    &kp COMMA     &kp KP_N0  &kp KP_DOT  &kp RET   &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
